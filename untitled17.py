# -*- coding: utf-8 -*-
"""Untitled17.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1gBlrxPBcA3RK-AlZ8TfkRmgtLa8kPLUn
"""

import nltk
import random
import requests
from nltk.chat.util import Chat, reflections
from nltk.sentiment.vader import SentimentIntensityAnalyzer
import wikipedia
from datetime import datetime
import pytz

nltk.download('punkt')
nltk.download('vader_lexicon')
wikipedia.set_lang("en")

sia = SentimentIntensityAnalyzer()

WEATHER_API_KEY = "YOUR_OPENWEATHER_API_KEY"
NEWS_API_KEY = "YOUR_NEWSAPI_KEY"
INDIAN_KNOWLEDGE = {
    "current prime minister": "Narendra Modi is the current Prime Minister of India (as of 2023).",
    "current president": "Droupadi Murmu is the current President of India (as of 2023).",
    "bollywood stars": ["Shah Rukh Khan", "Amitabh Bachchan", "Deepika Padukone",
                       "Ranveer Singh", "Alia Bhatt", "Salman Khan", "Aamir Khan"],
    "famous indian cricketers": ["Virat Kohli", "Rohit Sharma", "MS Dhoni",
                                "Sachin Tendulkar", "Kapil Dev", "Sunil Gavaskar"],
    "indian festivals": ["Diwali", "Holi", "Dussehra", "Eid", "Christmas", "Ganesh Chaturthi"],
    "capital of india": "New Delhi is the capital of India.",
    "indian currency": "The currency of India is the Indian Rupee (₹)."
}

custom_reflections = {
    "i am": "you are",
    "i was": "you were",
    "i": "you",
    "i'm": "you are",
    "i'd": "you would",
    "i've": "you have",
    "i'll": "you will",
    "my": "your",
    "you are": "I am",
    "you were": "I was",
    "you've": "I have",
    "you'll": "I will",
    "your": "my",
    "yours": "mine",
    "you": "me",
    "me": "you"
}

pairs = [
    [
        r"hi|hello|hey|greetings",
        ["Namaste! How can I assist you today? 😊",
         "Hello! How may I help you? 🤗"]
    ],
    [
        r"what is your name?",
        ["I'm IndiaBot, your AI assistant for all things India! 🤖",
         "My name is IndiaBot. I specialize in Indian information. 😊"]
    ],
    [
        r"how are you ?",
        ["I'm functioning perfectly! Jai Hind! 💻",
         "All systems go! Ready to share information about India. 💡"]
    ],
    [
        r"(.*) (help|support)",
        ["I can provide Indian time, weather, news, and knowledge about India! 🌟",
         "I can tell you about Bollywood, Indian politics, cricket, and more! 😊"]
    ],
    [
        r"(.*) (thank you|thanks)",
        ["You're welcome! 😊",
         "Happy to help! Let me know if you need anything else about India. 🤗"]
    ],
    [
        r"(.*) (joke|funny)",
        ["Why don't scientists trust atoms? Because they make up everything! 😆",
         "Why did the Indian programmer go broke? Because he used up all his cache! 💰"]
    ],
    [
        r"quit|bye|exit",
        ["Goodbye! Have a great day! 👋",
         "It was nice chatting with you. Jai Hind! 😊"]
    ],
    [
        r"(.*) (india|bharat)",
        ["India is a beautiful country with diverse culture and heritage! 🇮🇳",
         "Bharat is the world's largest democracy with rich history. 😊"]
    ]
]

chatbot = Chat(pairs, custom_reflections)

def analyze_sentiment(text):
    sentiment = sia.polarity_scores(text)
    if sentiment['compound'] > 0.5:
        return "positive"
    elif sentiment['compound'] < -0.5:
        return "negative"
    else:
        return "neutral"

def get_indian_time():
    tz = pytz.timezone('Asia/Kolkata')
    now = datetime.now(tz)
    return now.strftime("%I:%M %p (IST)")

def get_indian_date():
    tz = pytz.timezone('Asia/Kolkata')
    now = datetime.now(tz)
    return now.strftime("%d %B %Y, %A")

def get_indian_weather(city="Delhi"):
    if WEATHER_API_KEY == "YOUR_OPENWEATHER_API_KEY":
        return "Weather service not configured. Please add your OpenWeatherMap API key."

    base_url = "http://api.openweathermap.org/data/2.5/weather?"
    complete_url = f"{base_url}appid={WEATHER_API_KEY}&q={city},IN"

    try:
        response = requests.get(complete_url)
        data = response.json()

        if data["cod"] != "404":
            main = data["main"]
            temperature = main["temp"] - 273.15
            humidity = main["humidity"]
            weather_desc = data["weather"][0]["description"]

            return (f"Weather in {city}, India: {weather_desc}. "
                    f"Temperature: {temperature:.1f}°C, "
                    f"Humidity: {humidity}%")
        else:
            return "City not found. Please try another Indian city."
    except:
        return "Sorry, I couldn't fetch weather information right now."

def get_indian_news():
    if NEWS_API_KEY == "YOUR_NEWSAPI_KEY":
        return "News service not configured. Please add your NewsAPI key."

    try:
        url = f"https://newsapi.org/v2/top-headlines?country=in&apiKey={NEWS_API_KEY}"
        response = requests.get(url)
        data = response.json()

        if data["status"] == "ok":
            articles = data["articles"][:3]
            news = "Latest news from India:\n"
            for idx, article in enumerate(articles, 1):
                news += f"{idx}. {article['title']}\n"
            return news
        else:
            return "Couldn't fetch Indian news at the moment."
    except:
        return "Sorry, I couldn't retrieve news right now."


def get_indian_knowledge(query):
    query_lower = query.lower()
    for key in INDIAN_KNOWLEDGE:
        if key in query_lower:
            if isinstance(INDIAN_KNOWLEDGE[key], list):
                return f"Some famous {key}: {', '.join(INDIAN_KNOWLEDGE[key])}"
            else:
                return INDIAN_KNOWLEDGE[key]
    return None

def get_indian_summary(query):
    try:
        summary = wikipedia.summary(query, sentences=2)
        return summary
    except wikipedia.exceptions.DisambiguationError as e:
        return f"Multiple results found. Can you be more specific? Try: {random.choice(e.options[:3])}"
    except wikipedia.exceptions.PageError:
        return "Sorry, I couldn't find information on that topic related to India."


def india_chatbot():
    print("=" * 70)
    print("🇮🇳 **IndiaBot - Your Indian Information Assistant** 🇮🇳")
    print("I can tell you Indian time, weather, news, and knowledge about India!")
    print("Try asking about Bollywood, Indian PM, or cricket stars!")
    print("Type 'quit' to exit.")
    print("=" * 70)

    while True:
        user_input = input("You: ").lower()

        if user_input in ['quit', 'bye', 'exit']:
            print("IndiaBot: Goodbye! Jai Hind! 👋")
            break

        if "time" in user_input:
            print(f"IndiaBot: Current Indian Standard Time is {get_indian_time()} ⏰")
            continue

        if "date" in user_input:
            print(f"IndiaBot: Today's date in India is {get_indian_date()} 📅")
            continue

        if "weather" in user_input:
            city = input("IndiaBot: Which Indian city's weather would you like? ") or "Delhi"
            print(f"IndiaBot: {get_indian_weather(city)} 🌦️")
            continue

        if "news" in user_input or "headlines" in user_input:
            print(f"IndiaBot: {get_indian_news()} 📰")
            continue

        indian_knowledge = get_indian_knowledge(user_input)
        if indian_knowledge:
            print(f"IndiaBot: {indian_knowledge} 🇮🇳")
            continue

        sentiment = analyze_sentiment(user_input)

        response = chatbot.respond(user_input)

        if not response:
            wiki_response = get_indian_summary(user_input)
            print(f"IndiaBot: {wiki_response} 📚")
        else:
            if sentiment == "positive":
                response = random.choice(["Great! ", "Awesome! ", "😊 "]) + response
            elif sentiment == "negative":
                response = random.choice(["I'm sorry. ", "Oh no! ", "😔 "]) + response

            print(f"IndiaBot: {response}")

if __name__ == "__main__":
    india_chatbot()